require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

# Definici√≥n de funci√≥n post_install_fixes integrada directamente
def post_install_fixes(installer)
  puts "üîß Aplicando correcciones para alertas de Xcode..."
  
  installer.pods_project.targets.each do |target|
    puts "üì¶ Configurando target: #{target.name}"
    
    target.build_configurations.each do |config|
      # Suprimir TODAS las advertencias de nullability y compatibilidad
      config.build_settings['CLANG_WARN_NULLABLE_TO_NONNULL_CONVERSION'] = 'NO'
      config.build_settings['CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF'] = 'NO'
      config.build_settings['GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS'] = 'NO'
      config.build_settings['CLANG_WARN_DOCUMENTATION_COMMENTS'] = 'NO'
      config.build_settings['CLANG_WARN_UNGUARDED_AVAILABILITY'] = 'NO'
      
      # Suprimir advertencias espec√≠ficas de nullability
      config.build_settings['CLANG_WARN_OBJC_EXPLICIT_OWNERSHIP_TYPE'] = 'NO'
      config.build_settings['CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES'] = 'NO'
      config.build_settings['CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS'] = 'NO'
      config.build_settings['CLANG_WARN_STRICT_PROTOTYPES'] = 'NO' # Disable prototype warnings
      config.build_settings['CLANG_WARN_MISSING_PROTOTYPES'] = 'NO'
      
      # Silenciar advertencias de Swift 6 y compatibilidad
      config.build_settings['SWIFT_SUPPRESS_WARNINGS'] = 'YES'
      config.build_settings['SWIFT_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
      
      # Establecer la versi√≥n de iOS m√≠nima a 13.0 para todos los pods
      if config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'].to_f < 13.0
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      end
      
      # A√±adir flags para suprimir advertencias espec√≠ficas en Clang
      warning_flags = [
        '-w',                                  # Suprimir todas las advertencias
        '-Wno-nullability-completeness',        # Suprimir advertencias de nullability
        '-Wno-nullability-extension',           # Suprimir extensiones de nullability
        '-Wno-availability',                    # Suprimir advertencias de disponibilidad
        '-Wno-deprecated-declarations',         # Suprimir declaraciones obsoletas
        '-Wno-unguarded-availability-new',      # Suprimir disponibilidad no protegida
        '-Wno-strict-prototypes',              # Suprimir advertencias de prototipos estrictos
        '-Wno-missing-prototypes'              # Suprimir advertencias de prototipos faltantes
      ]
      
      # Asegurar que OTHER_CFLAGS sea un array antes de a√±adir flags
      if config.build_settings['OTHER_CFLAGS'].nil?
        config.build_settings['OTHER_CFLAGS'] = ['$(inherited)'] + warning_flags
      else
        existing_flags = config.build_settings['OTHER_CFLAGS']
        if existing_flags.is_a?(String)
          config.build_settings['OTHER_CFLAGS'] = [existing_flags] + warning_flags
        elsif existing_flags.is_a?(Array)
          config.build_settings['OTHER_CFLAGS'] = existing_flags + warning_flags
        else
          config.build_settings['OTHER_CFLAGS'] = ['$(inherited)'] + warning_flags
        end
      end
      
      # A√±adir flags para Swift
      swift_flags = ['-suppress-warnings']
      
      # Asegurar que OTHER_SWIFT_FLAGS sea un array antes de a√±adir flags
      if config.build_settings['OTHER_SWIFT_FLAGS'].nil?
        config.build_settings['OTHER_SWIFT_FLAGS'] = ['$(inherited)'] + swift_flags
      else
        existing_flags = config.build_settings['OTHER_SWIFT_FLAGS']
        if existing_flags.is_a?(String)
          config.build_settings['OTHER_SWIFT_FLAGS'] = [existing_flags] + swift_flags
        elsif existing_flags.is_a?(Array)
          config.build_settings['OTHER_SWIFT_FLAGS'] = existing_flags + swift_flags
        else
          config.build_settings['OTHER_SWIFT_FLAGS'] = ['$(inherited)'] + swift_flags
        end
      end
      
      # Desactivar todas las advertencias agresivamente
      config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
      
      # Define preprocessor macro to handle nullability warnings in header files
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'DISABLE_NULLABILITY_WARNINGS=1'
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '_NONNULL='
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '_NULLABLE='
    end
  end
  
  # Update to recommended settings
  installer.pods_project.build_configurations.each do |config|
    config.build_settings["CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED"] = "YES"
    config.build_settings["CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER"] = "NO" # Avoid framework header warnings
  end
  
  # Update main project settings too
  installer.aggregate_targets.each do |aggregate_target|
    aggregate_target.user_project.build_configurations.each do |config|
      config.build_settings["CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED"] = "YES"
      config.build_settings["CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER"] = "NO"
    end
    aggregate_target.user_project.save
  end

  # Fix specific expo-updates script phase issues
  installer.pods_project.targets.each do |target|
    if target.name == "EXUpdates" || target.name == "expo-updates"
      target.build_phases.each do |build_phase|
        if build_phase.is_a?(Xcodeproj::Project::Object::PBXShellScriptBuildPhase) && 
           build_phase.name && build_phase.name.include?("Generate updates resources for expo-updates")
          build_phase.dependency_file = nil
          build_phase.always_out_of_date = "1"
        end
      end
    end
  end
  
  # Fix all other known script phase issues
  installer.pods_project.targets.each do |target|
    if ['expo-updates', 'EXUpdates', 'React-Fabric', 'React-FabricComponents', 'hermes-engine', 'React-Core'].include?(target.name)
      target.build_phases.each do |build_phase|
        if build_phase.is_a?(Xcodeproj::Project::Object::PBXShellScriptBuildPhase)
          build_phase.dependency_file = nil
          build_phase.always_out_of_date = "1"
        end
      end
    end
  end
  
  # Ajustar los script build phases para que no den advertencias
  installer.pods_project.targets.each do |target|
    target.build_phases.each do |build_phase|
      if build_phase.is_a?(Xcodeproj::Project::Object::PBXShellScriptBuildPhase)
        build_phase.shell_script.gsub!(/set -e/, 'set +e') if build_phase.shell_script
      end
    end
  end
  
  puts "‚úÖ Correcciones aplicadas exitosamente"
end

target 'Workproof' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'node',
      '--no-warnings',
      '--eval',
      'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # This is necessary for Xcode 14, because it signs resource bundles by default
    # when building for devices.
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
    
    # Llamar a nuestras correcciones personalizadas
    post_install_fixes(installer)
  end
end
