require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

# Cargar nuestro archivo de correcciones post-install mejorado
require_relative './Podfile.post_install'

# Definici√≥n de correcciones post-install integradas directamente
def post_install_fixes(installer)
  installer.pods_project.targets.each do |target|
    # Ignorar advertencias de nullability en todos los archivos de los pods
    target.build_configurations.each do |config|
      # Deshabilitar todas las advertencias relacionadas con nullability
      config.build_settings['CLANG_WARN_NULLABLE_TO_NONNULL_CONVERSION'] = 'NO'
      config.build_settings['CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF'] = 'NO'
      config.build_settings['GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS'] = 'NO'
      config.build_settings['CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS'] = 'NO'
      config.build_settings['CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES'] = 'NO'
      config.build_settings['CLANG_WARN_STRICT_PROTOTYPES'] = 'NO' # Disable prototype warnings
      config.build_settings['CLANG_WARN_MISSING_PROTOTYPES'] = 'NO'
      config.build_settings['SWIFT_SUPPRESS_WARNINGS'] = 'YES'
      
      # Disable nullability specific warnings
      config.build_settings['CLANG_WARN_NULLABLE_TO_NONNULL_CONVERSION'] = 'NO'
      config.build_settings['CLANG_ANALYZER_NONNULL'] = 'NO'
      
      # Disable documentation warnings
      config.build_settings['CLANG_WARN_DOCUMENTATION_COMMENTS'] = 'NO'
      
      # Set minimum iOS deployment target
      if config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'].to_f < 13.0
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      end
      
      # Add extensive compiler flags to silence all warnings
      warning_flags = [
        '-Wno-everything', # Disable ALL warnings
        '-Wno-nullability-completeness',
        '-Wno-nullability',
        '-Wno-implicit-function-declaration',
        '-Wno-deprecated-declarations',
        '-Wno-#warnings',
        '-Wno-error',
        '-Wno-unused-parameter',
        '-Wno-sign-compare',
        '-Wno-incompatible-pointer-types',
        '-Wno-duplicate-decl-specifier',
        '-Wno-strict-prototypes', # Silence "function declared without a prototype" warnings
        '-Wno-missing-prototypes',
        '-w'  # This silences ALL warnings
      ]
      
      # Add warning flags to OTHER_CFLAGS
      if config.build_settings['OTHER_CFLAGS'].nil?
        config.build_settings['OTHER_CFLAGS'] = ['$(inherited)'] + warning_flags
      else
        config.build_settings['OTHER_CFLAGS'] = config.build_settings['OTHER_CFLAGS'].is_a?(Array) ? config.build_settings['OTHER_CFLAGS'] : [config.build_settings['OTHER_CFLAGS']]
        config.build_settings['OTHER_CFLAGS'] += warning_flags
      end
      
      # Add warning flags to WARNING_CFLAGS
      config.build_settings['WARNING_CFLAGS'] = ['$(inherited)'] + warning_flags
      
      # Add Swift warning suppression flags
      if config.build_settings['OTHER_SWIFT_FLAGS'].nil?
        config.build_settings['OTHER_SWIFT_FLAGS'] = ['$(inherited)', '-suppress-warnings']
      else
        config.build_settings['OTHER_SWIFT_FLAGS'] = config.build_settings['OTHER_SWIFT_FLAGS'].is_a?(Array) ? config.build_settings['OTHER_SWIFT_FLAGS'] : [config.build_settings['OTHER_SWIFT_FLAGS']]
        config.build_settings['OTHER_SWIFT_FLAGS'] += ['-suppress-warnings']
      end
      
      # Define preprocessor macro to handle nullability warnings in header files
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'DISABLE_NULLABILITY_WARNINGS=1'
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '_NONNULL='
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '_NULLABLE='
      
      # Force treat warnings as errors to OFF
      config.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
      config.build_settings['SWIFT_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
    end
  end
  
  # Update to recommended settings for projects
  installer.pods_project.build_configurations.each do |config|
    config.build_settings["CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED"] = "YES"
    config.build_settings["CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER"] = "NO" # Avoid framework header warnings
  end
  
  # Update main project settings too
  installer.aggregate_targets.each do |aggregate_target|
    aggregate_target.user_project.build_configurations.each do |config|
      config.build_settings["CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED"] = "YES"
      config.build_settings["CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER"] = "NO"
    end
    aggregate_target.user_project.save
  end

  # Apply all relevant warning suppression flags to each pod target
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      # Disable ALL clang warnings and deprecation warnings
      config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
      config.build_settings['CLANG_WARN_NULLABLE_TO_NONNULL_CONVERSION'] = 'NO'
      config.build_settings['CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF'] = 'NO'
      config.build_settings['GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS'] = 'NO'
      config.build_settings['CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS'] = 'NO'
      config.build_settings['CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES'] = 'NO'
      config.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
      config.build_settings['SWIFT_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
    end
  end
  
  # Fix specific expo-updates script phase issues
  installer.pods_project.targets.each do |target|
    if target.name == "EXUpdates" || target.name == "expo-updates"
      target.build_phases.each do |build_phase|
        if build_phase.is_a?(Xcodeproj::Project::Object::PBXShellScriptBuildPhase) && 
           build_phase.name && build_phase.name.include?("Generate updates resources for expo-updates")
          build_phase.dependency_file = nil
          build_phase.always_out_of_date = "1"
        end
      end
    end
  end
  
  # Fix all other known script phase issues
  installer.pods_project.targets.each do |target|
    if ['expo-updates', 'EXUpdates', 'React-Fabric', 'React-FabricComponents', 'hermes-engine', 'React-Core'].include?(target.name)
      target.build_phases.each do |build_phase|
        if build_phase.is_a?(Xcodeproj::Project::Object::PBXShellScriptBuildPhase)
          build_phase.dependency_file = nil
          build_phase.always_out_of_date = "1"
        end
      end
    end
  end
  
  # Update to recommended settings
  installer.pods_project.root_object.attributes['LastUpgradeCheck'] = '1500'
  installer.pods_project.save
  
  puts "Applied aggressive warning suppression to all pod targets"
end

target 'Workproof' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'node',
      '--no-warnings',
      '--eval',
      'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # This is necessary for Xcode 14, because it signs resource bundles by default
    # when building for devices.
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
    
    # Llamar a nuestras correcciones personalizadas
    post_install_fixes(installer)
  end
end
