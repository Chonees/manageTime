# Archivo Podfile.post_install para solucionar problemas de alertas en Xcode

# Esta funci√≥n se ejecutar√° despu√©s de instalar todos los pods
def post_install_fixes(installer)
  puts "üîß Aplicando correcciones para alertas de Xcode..."
  
  installer.pods_project.targets.each do |target|
    puts "üì¶ Configurando target: #{target.name}"
    
    target.build_configurations.each do |config|
      # Suprimir TODAS las advertencias de nullability y compatibilidad
      config.build_settings['CLANG_WARN_NULLABLE_TO_NONNULL_CONVERSION'] = 'NO'
      config.build_settings['CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF'] = 'NO'
      config.build_settings['GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS'] = 'NO'
      config.build_settings['CLANG_WARN_DOCUMENTATION_COMMENTS'] = 'NO'
      config.build_settings['CLANG_WARN_UNGUARDED_AVAILABILITY'] = 'NO'
      
      # Suprimir advertencias espec√≠ficas de nullability
      config.build_settings['CLANG_WARN_OBJC_EXPLICIT_OWNERSHIP_TYPE'] = 'NO'
      config.build_settings['CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES'] = 'NO'
      config.build_settings['CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS'] = 'NO'
      
      # Silenciar advertencias de Swift 6 y compatibilidad
      config.build_settings['SWIFT_SUPPRESS_WARNINGS'] = 'YES'
      config.build_settings['SWIFT_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
      
      # Establecer la versi√≥n de iOS m√≠nima a 13.0 para todos los pods
      if config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'].to_f < 13.0
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      end
      
      # A√±adir flags para suprimir advertencias espec√≠ficas en Clang
      other_cflags = config.build_settings['OTHER_CFLAGS'] || ['$(inherited)']
      other_cflags += [
        '-w',                                    # Suprimir todas las advertencias
        '-Wno-nullability-completeness',        # Suprimir advertencias de nullability
        '-Wno-nullability-extension',           # Suprimir extensiones de nullability
        '-Wno-availability',                    # Suprimir advertencias de disponibilidad
        '-Wno-deprecated-declarations',         # Suprimir declaraciones obsoletas
        '-Wno-unguarded-availability-new'       # Suprimir disponibilidad no protegida
      ]
      config.build_settings['OTHER_CFLAGS'] = other_cflags.uniq
      
      # A√±adir flags para Swift
      other_swift_flags = config.build_settings['OTHER_SWIFT_FLAGS'] || ['$(inherited)']
      other_swift_flags += [
        '-suppress-warnings',
        '-Xfrontend', '-warn-concurrency',
        '-Xfrontend', '-enable-actor-data-race-checks'
      ]
      config.build_settings['OTHER_SWIFT_FLAGS'] = other_swift_flags.uniq
      
      # Configuraciones espec√≠ficas para librer√≠as problem√°ticas
      case target.name
      when 'expo-dev-launcher', 'ExpoModulesCore', 'ExpoFileSystem', 'EXAV'
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        config.build_settings['CLANG_WARN_EVERYTHING'] = 'NO'
      end
    end
    
    # Configurar el proyecto para cada target espec√≠fico
    target.build_phases.each do |build_phase|
      if build_phase.is_a?(Xcodeproj::Project::Object::PBXShellScriptBuildPhase)
        build_phase.shell_script.gsub!(/set -e/, 'set +e') if build_phase.shell_script
      end
    end
  end
  
  # Configuraciones a nivel de proyecto
  installer.pods_project.build_configurations.each do |config|
    config.build_settings['CLANG_WARN_NULLABLE_TO_NONNULL_CONVERSION'] = 'NO'
    config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
  end
  
  puts "‚úÖ Correcciones aplicadas exitosamente"
end
